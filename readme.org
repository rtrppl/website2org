#+title: website2org.el

#+BEGIN_HTML
<img src="/website2org.gif" alt="website2org in action">
#+END_HTML


*website2org.el* downloads a website, transforms it into minimalist Orgmode, and presents the results as either a temporary Orgmode buffer or creates an .org file in a specified directory.

I have two primary uses cases for this. 1) Local storage/read it later: I often store websites locally to link them (and specific paragraphs) to my Zettelkasten in [[https://github.com/rtrppl/orgrr][orgrr]]. (They are downloaded to the directory "findings", an orgrr container, and the tag "orgrr-project" is automatically added. See orgrr for details.) 2) To quickly see the contents of a website in [[https://codeberg.org/martianh/mastodon.el][mastodon.el]]. 

This package is still in a very early stage. I use it to replace =orgrr-save-website=, which draws on =org-web-tools--eww-readable= and =org-web-tools--html-to-org-with-pandoc= but has become more fragile by the day. =orgrr-save-website= also often does struggle to produce the kind of Orgmode I want to have - with as little HTML fragments as possible. 

website2org requires [[https://www.gnu.org/software/wget/][wget]] but does not use [[https://pandoc.org/][Pandoc]]. The package parses HTML via [[https://stackoverflow.com/questions/1732348/regex-match-open-tags-except-xhtml-self-contained-tags][RegExp]] to achieve rather minimal looking Orgmode files.

** Minimal Orgmode

website2org ignores all information before the first =<h1>= headline and everything coming after the =<footer>=. All data about images, source, =<div>= and similar types of tags are also ignored. It respects all paragraphs, headlines, lists (ordered and not), inline code, block quotes, =<pre>= (line breaks are still an issue here), links (including local links), =<strong>=, and =<em>=. Tabs and multiple spaces are reduced to one space. A new line cannot start with a space (or "- " followed by nothing).

** Known issues

Parsing HTML with RegEx comes with lot's of issues. Most experienced coders  [[https://blog.codinghorror.com/parsing-html-the-cthulhu-way/][strongly advice against doing so]] for good reason. And there are numerous tools to parse HTML, there is even one [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Parsing-HTML_002fXML.html][built-in]] (=libxml-parse-html-region=). I also considered [[https://github.com/htacg/tidy-html5][tidy-html5]], hxclean of [[https://www.w3.org/Tools/HTML-XML-utils/README][html-xml-utils]] fame, and [[https://github.com/mgdm/htmlq][htmlq]]. All of these worked to some degree but stopped doing so when leaving the UTF-8 world. In other words, not a single one of them produced acceptable results for Chinese websites. Given the quality of the current solution, I don't see the pressing need to add such HTML parsing. website2org will work for most site - the more they stick to common standards and behavior, the better are the chances. Right now we may be at 85-95% of websites working, with a 5% chance of some small issue (please report the obvious ones). 

Still, there are some known issues even with otherwise working websites. Orgmode does not deal well with source blocks within quote blocks. These will look weird. Also I haven't figured out how to best do line breaks in source blocks. Some HTML tags, such as <sup>, may still appear in text, as I haven't found a good way to represent them in Orgmode.

** Change log

*0.1.2*
- Further improvements to parsing

*0.1.1*
- Added <ol> and removed <input> and <time>

*0.1*
- first public version

** Installation

Clone the repository:

=git clone https://github.com/rtrppl/website2org=

To run Website2org, you need to load the package by adding it to your .emacs or init.el:

#+begin_src elisp
(load "/path/to/website2org/website2org.el") 
#+end_src

You should set a binding to =website2org= and =website2org-temp=. 

#+begin_src elisp
(global-set-key (kbd "C-M-s-<down>") 'website2org) ;; this is what I use on a Mac
(global-set-key (kbd "C-M-s-<up>") 'website2org-temp)
#+end_src

Or, if you use straight:

#+begin_src elisp
(use-package website2org
  :straight (:host github :repo "rtrppl/website2org")
  :config
  (setq website2org-directory "/path/to/where/websites/should/be/stored/") ;; if needed, see below
  :bind
  (:map global-map)
  ("C-M-s-<down>" . website2org)
  ("C-M-s-<up>" . website2org-temp))
#+end_src

Additionally you can set these values:

#+begin_src elisp
;; If wget should be called with a differnt command.
(setq website2org-wget-cmd "wget -q -O ") 
;; Change the name of the local cache file.
(setq website2org-cache-filename "~/website2org-cache.html") 
;; Turn website2org-additional-meta nil if not applicable. This is for
;; use in orgrr (https://github.com/rtrppl/orgrr).
(setq website2org-additional-meta "#+roam_tags: website orgrr-project") 
;; By default all websites will be stored in the org-directory.
;; Set website2org-directory, if you prefer a different directory.
;; directories must end with /
(setq website2org-directory "/path/to/where/websites/should/be/stored/") 
(setq website2org-filename-time-format "%Y%m%d%H%M%S")
#+end_src


** Functions

These are the primary functions of website2org.el:

=website2org= will download the website at point (or from a provided URL) and save it as an Orgmode file. =website2org-temp= will download a website at point (or from a provided URL) and present it as a temporary Orgmode buffer.

